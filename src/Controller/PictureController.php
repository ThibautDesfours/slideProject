<?php

namespace App\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\HttpFoundation\Response;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\String\Slugger\SluggerInterface;
use App\Service\FileUploader;
use App\Entity\Picture;
use App\Form\PictureFormType;
use Symfony\Component\Filesystem\Filesystem;

class PictureController extends AbstractController
{
    /**
     * @Route("/index", name="index")
     * @Route("/", name="/")
     */
    public function index()
    {
        return $this->render('base.html.twig', [
            'controller_name' => 'PictureController',
        ]);
    }

    /**
    * @Route("/picturesGalery", name="picturesGalery")
    */
    public function show(EntityManagerInterface $em):Response
    {
        //find all pictures 
        $pictures = $em->getRepository(Picture::class)->findAll();

        return $this->render('picture/picturesGalery.html.twig', [
            'pictures' => $pictures
        ]);
    }

    /**
    * @Route("/new", name="newPicture")
    */
    public function new(Picture $picture = null, Request $request, SluggerInterface $slugger, EntityManagerInterface $manager)
    {
        $picture = new Picture();
        $form = $this->createForm(PictureFormType::class, $picture);
        $form->handleRequest($request);


        if ($form->isSubmitted() && $form->isValid()) {

            /** @var UploadedFile $pictureFile */
            $pictureFile = $form->get('path_picture')->getData();

            if ($pictureFile) {
                $originalFilename = pathinfo($pictureFile->getClientOriginalName(), PATHINFO_FILENAME);
                $safeFilename = $slugger->slug($originalFilename);
                $newFilename = $safeFilename.'-'.uniqid().'.'.$pictureFile->guessExtension();

                // Move the file to the directory where brochures are stored
                try {
                    $pictureFile->move(
                        $this->getParameter('pictures_directory'),
                        $newFilename
                    );
                } catch (FileException $e) {
                    // ... handle exception if something happens during file upload
                }

                $picture->setPathPicture($newFilename);
            }

            if(!$picture->getId()){
                $picture->setCreatedAt(new \Datetime());
            }

            $manager->persist($picture);
            $manager->flush();

            return $this->redirectToRoute('picturesGalery');
        }

        return $this->render('picture/pictureModal.html.twig', [
            'form' => $form->createView(),
            'picture' => $picture
        ]);
    }

    
    /**
    * @Route("/delete/{id}", name="deletePicture", requirements={"id"="\d+"})
    */
    public function delete(int $id, EntityManagerInterface $em, SluggerInterface $slugger, Request $request):Response

    {
        $filesystem = new Filesystem();

        $picture = $em ->getRepository(Picture::class)->find($id);
       
        $pictureFile = $picture->getPathPicture();

        $filesystem->remove('./pictures/'.$pictureFile);
        
        $em->remove($picture);
        $em->flush();

        

        return $this->redirectToRoute('picturesGalery');
    }

    /**
    * @Route("/showPicture/{id}", name="showPicture", requirements={"id"="\d+"})
    */
    public function showPicture(int $id, EntityManagerInterface $em):Response
    {
        $picture = $em ->getRepository(Picture::class)->find($id);
        

        return $this->render('picture/pictureModalDelete.html.twig', [
            'picture' => $picture
        ]);
    }


    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    
}